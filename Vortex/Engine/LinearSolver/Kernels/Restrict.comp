#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
}
consts;

layout(std430, binding = 0) buffer FineDiagonal
{
  float value[];
}
fineDiagonal;

layout(std430, binding = 1) buffer Fine
{
  float value[];
}
fine;

layout(std430, binding = 2) buffer CoarseDiagonal
{
  float value[];
}
coarseDiagonal;

layout(std430, binding = 3) buffer Coarse
{
  float value[];
}
coarse;

void main()
{
  uvec2 localSize = gl_WorkGroupSize.xy;  // Hack for Mali-GPU

  ivec2 pos = ivec2(gl_GlobalInvocationID);
  if (pos.x < consts.width && pos.y < consts.height)
  {
    int index = pos.x + pos.y * consts.width;
    if (coarseDiagonal.value[index] != 0.0)
    {
      ivec2 finePos = pos * ivec2(2);
      int fineWidth = consts.width * 2;
      int fineIndex = finePos.x + finePos.y * fineWidth;

      float p = 0.0;
      if (fineDiagonal.value[fineIndex] != 0.0)
      {
        p += fine.value[fineIndex];
      }

      if (fineDiagonal.value[fineIndex + 1] != 0.0)
      {
        p += fine.value[fineIndex + 1];
      }

      if (fineDiagonal.value[fineIndex + fineWidth] != 0.0)
      {
        p += fine.value[fineIndex + fineWidth];
      }

      if (fineDiagonal.value[fineIndex + 1 + fineWidth] != 0.0)
      {
        p += fine.value[fineIndex + 1 + fineWidth];
      }

      coarse.value[index] = p / 4.0;
    }
  }
}
