#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
}
consts;

layout(std430, binding = 0) buffer Diagonal
{
  float value[];
}
diagonal;

layout(std430, binding = 1) buffer Lower
{
  vec2 value[];
}
lower;

layout(std430, binding = 2) buffer Input1
{
  float value[];
}
pressure;

layout(std430, binding = 3) buffer Input2
{
  float value[];
}
z;

const float w = 1.1;

void main()
{
  uvec2 localSize = gl_WorkGroupSize.xy;  // Hack for Mali-GPU

  ivec2 pos = ivec2(gl_GlobalInvocationID);

  if (pos.x > 0 && pos.y > 0 && pos.x < consts.width - 1 && pos.y < consts.height - 1)
  {
    int index = pos.x + pos.y * consts.width;

    float centreDiagonal = diagonal.value[index];
    if (centreDiagonal != 0.0)
    {
      vec4 weights;
      weights.yw = lower.value[index];
      weights.x = lower.value[index + 1].x;
      weights.z = lower.value[index + consts.width].y;

      vec4 diagonalWeights;
      diagonalWeights.x = -diagonal.value[index + 1];
      diagonalWeights.y = -diagonal.value[index - 1];
      diagonalWeights.z = -diagonal.value[index + consts.width];
      diagonalWeights.w = -diagonal.value[index - consts.width];

      weights.x = diagonalWeights.x == 0.0 ? 0.0 : weights.x / diagonalWeights.x;
      weights.y = diagonalWeights.y == 0.0 ? 0.0 : weights.y / diagonalWeights.y;
      weights.z = diagonalWeights.z == 0.0 ? 0.0 : weights.z / diagonalWeights.z;
      weights.w = diagonalWeights.w == 0.0 ? 0.0 : weights.w / diagonalWeights.w;

      float diagonal = 1.0 + dot(weights.yw, weights.yw);

      float oldPressure = pressure.value[index];

      vec4 p;
      p.x = pressure.value[index + 1];
      p.y = pressure.value[index - 1];
      p.z = pressure.value[index + consts.width];
      p.w = pressure.value[index - consts.width];

      z.value[index] = (2.0 - w) * (oldPressure * diagonal + w * dot(p, weights)) / centreDiagonal;
    }
  }
}
