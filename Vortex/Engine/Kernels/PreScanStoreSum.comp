#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x_id = 1, local_size_y_id = 2) in;
layout(constant_id = 1) const int blockSize = 256;  // same as gl_WorkGroupSize.x or local_size_x

layout(push_constant) uniform Consts
{
  int n;
}
consts;

layout(std430, binding = 0) buffer Input
{
  int value[];
}
i;

layout(std430, binding = 1) buffer Output
{
  int value[];
}
o;

layout(std430, binding = 2) buffer PartialSums
{
  int value[];
}
partial;

shared int sdata[2 * blockSize + 2 * blockSize / 16];

#include "CommonPreScan.comp"

void ClearLastElementStoreSum()
{
  uint local_id = gl_LocalInvocationID.x;
  uint group_id = gl_WorkGroupID.x;

  if (local_id == 0)
  {
    uint index = (blockSize * 2) - 1;
    index += MEMORY_BANK_OFFSET(index);
    partial.value[group_id] = sdata[index];
    sdata[index] = 0;
  }
}

void PreScanGroupStoreSum()
{
  uint stride = BuildPartialSum();
  ClearLastElementStoreSum();
  ScanRootToLeaves(stride);
}

void main()
{
  uint group_id = gl_WorkGroupID.x;
  uvec2 localSize = gl_WorkGroupSize.xy;  // Hack for Mali-GPU

  uint local_index = group_id * blockSize * 2;
  uvec4 address_pair = GetAddressMapping(local_index);

  LoadLocalFromGlobal(address_pair);
  PreScanGroupStoreSum();
  StoreLocalToGlobal(address_pair);
}
