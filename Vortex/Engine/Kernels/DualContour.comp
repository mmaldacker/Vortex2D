#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
}
consts;

layout(binding = 0, r32f) uniform image2D SolidLevelSet;

struct Voxel
{
  vec2 vertex;
  bool has_x_edge;
  bool has_y_edge;
};

layout(std430, binding = 1) buffer Voxels
{
  Voxel value[];
}
voxels;

layout(std430, binding = 2) buffer Vertices
{
  int value[];
}
vertices;

layout(std430, binding = 3) buffer Indices
{
  int value[];
}
indices;

#include "QEF.comp"

bool is_positive(float x)
{
  return x >= 0.0;
}

float interval(float v0, float v1)
{
  return (0 - v0) / (v1 - v0);
}

float linear_interpolate_value(vec2 xy)
{
  ivec2 ij = ivec2(floor(xy));
  vec2 f = xy - vec2(ij);

  return mix(mix(imageLoad(SolidLevelSet, ij + ivec2(0, 0)).x,
                 imageLoad(SolidLevelSet, ij + ivec2(1, 0)).x,
                 f.x),
             mix(imageLoad(SolidLevelSet, ij + ivec2(0, 1)).x,
                 imageLoad(SolidLevelSet, ij + ivec2(1, 1)).x,
                 f.x),
             f.y);
}

vec3 get_normal(vec3 p)
{
  const float d = 0.01;

  vec2 n = vec2((linear_interpolate_value(vec2(p.x + d, p.y)) -
                 linear_interpolate_value(vec2(p.x - d, p.y))) /
                    2 / d,
                (linear_interpolate_value(vec2(p.x, p.y + d)) -
                 linear_interpolate_value(vec2(p.x, p.y - d))) /
                    2 / d);

  return vec3(normalize(n), 0.0);
}

bool dual_contour_2d_find_best_vertex(ivec2 pos, out vec3 vertex)
{
  vec4 pointaccum = vec4(0.0);
  mat3 ATA = mat3(0.0);
  vec3 ATb = vec3(0.0);

  float x0y0 = imageLoad(SolidLevelSet, pos).x;
  float x0y1 = imageLoad(SolidLevelSet, pos + ivec2(0, 1)).x;
  float x1y0 = imageLoad(SolidLevelSet, pos + ivec2(1, 0)).x;
  float x1y1 = imageLoad(SolidLevelSet, pos + ivec2(1, 1)).x;

  bool has_vertex = false;

  if (is_positive(x0y0) != is_positive(x0y1))
  {
    vec3 point = vec3(pos.x, pos.y + interval(x0y0, x0y1), 0.0);
    qef_add(get_normal(point), point, ATA, ATb, pointaccum);
    has_vertex = true;
  }
  if (is_positive(x1y0) != is_positive(x1y1))
  {
    vec3 point = vec3(pos.x + 1, pos.y + interval(x1y0, x1y1), 0.0);
    qef_add(get_normal(point), point, ATA, ATb, pointaccum);
    has_vertex = true;
  }
  if (is_positive(x0y0) != is_positive(x1y0))
  {
    vec3 point = vec3(pos.x + interval(x0y0, x1y0), pos.y, 0.0);
    qef_add(get_normal(point), point, ATA, ATb, pointaccum);
    has_vertex = true;
  }
  if (is_positive(x0y1) != is_positive(x1y1))
  {
    vec3 point = vec3(pos.x + interval(x0y1, x1y1), pos.y + 1, 0.0);
    qef_add(get_normal(point), point, ATA, ATb, pointaccum);
    has_vertex = true;
  }

  if (!has_vertex)
  {
    return false;
  }

  // add bias
  const foat bias = 0.01;
  vec3 mass_point = pointaccum.xyz / pointaccum.w;
  qef_add(vec3(bias, 0, 0), mass_point, ATA, ATb, pointaccum);
  qef_add(vec3(0, bias, 0), mass_point, ATA, ATb, pointaccum);

  qef_solve(ATA, ATb, pointaccum, vertex);

  return true;
}

void main()
{
  ivec2 pos = ivec2(gl_GlobalInvocationID);
  if (pos.x < consts.width && pos.y < consts.height)
  {
    vec3 vertex;
    int index = pos.x + consts.width * pos.y;
    if (dual_contour_2d_find_best_vertex(pos, vertex))
    {
      voxels.value[index].vertex = vertex.xy;
      vertices.value[index] = 1;
    }
    else
    {
      voxels.value[index].vertex = vec2(0.0);
      vertices.value[index] = 0;
    }

    float f = imageLoad(SolidLevelSet, pos).x;
    float fx = imageLoad(SolidLevelSet, pos + ivec2(1, 0)).x;
    float fy = imageLoad(SolidLevelSet, pos + ivec2(0, 1)).x;

    indices.value[index] = 0;
    voxels.value[index].has_x_edge = false;
    voxels.value[index].has_y_edge = false;

    if (is_positive(f) != is_positive(fx))
    {
      voxels.value[index].has_x_edge = true;
      indices.value[index] += 2;
    }
    if (is_positive(f) != is_positive(fy))
    {
      voxels.value[index].has_y_edge = true;
      indices.value[index] += 2;
    }
  }
}
