#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
}
consts;

#include "CommonParticles.comp"

layout(std430, binding = 0) buffer Particles
{
  Particle value[];
}
particles;

layout(std430, binding = 1) buffer Index
{
  int value[];
}
scanIndex;

layout(std430, binding = 2) buffer Count
{
  int value[];
}
count;

layout(std430, binding = 3) buffer Seeds
{
  ivec2 value[];
}
seeds;

uint hash(uint x)
{
  x += (x << 10u);
  x ^= (x >> 6u);
  x += (x << 3u);
  x ^= (x >> 11u);
  x += (x << 15u);
  return x;
}

vec2 random(ivec2 pos, ivec2 seed)
{
  const uint mantissaMask = 0x007FFFFFu;
  const uint one = 0x3F800000u;

  uvec2 h =
      uvec2(hash(pos.x) ^ hash(pos.y) ^ hash(seed.x), hash(pos.x) ^ hash(pos.y) ^ hash(seed.y));
  h &= mantissaMask;
  h |= one;

  vec2 r2 = uintBitsToFloat(h);
  return pos + r2 - 1.0;
}

void main()
{
  uvec2 localSize = gl_WorkGroupSize.xy;  // Hack for Mali-GPU

  ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
  if (pos.x < consts.width && pos.y < consts.height)
  {
    int particleIndex = pos.x + pos.y * consts.width;
    int particleCount = count.value[particleIndex];
    for (int i = 0; i < particleCount; i++)
    {
      Particle newParticle;
      newParticle.Position = random(pos, seeds.value[i]);
      newParticle.Velocity = vec2(0.0);

      particles.value[scanIndex.value[particleIndex] + i] = newParticle;
    }
  }
}
