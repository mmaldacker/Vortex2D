#include "../CommonInterpolate.comp"

vec4[16] get_samples(ivec2 ij)
{
  vec4 t[16];
  for (int j = 0; j < 4; ++j)
  {
    for (int i = 0; i < 4; ++i)
    {
      ivec2 pos = ij + ivec2(i, j) - ivec2(1);
      pos = clamp(pos, ivec2(0, 0), ivec2(consts.width - 1, consts.height - 1));
      t[i + 4 * j] = imageLoad(Velocity, pos);
    }
  }
  return t;
}

float bicubic_interpolate_value(vec2 xy, int i)
{
  ivec2 ij = ivec2(floor(xy));
  vec2 f = xy - vec2(ij);

  vec4 t[16] = get_samples(ij);
  return bicubic(t, f)[i];
}

float linear_interpolate_value(vec2 xy, int i)
{
  ivec2 ij = ivec2(floor(xy));
  vec2 f = xy - vec2(ij);

  return mix(
      mix(imageLoad(Velocity, ij + ivec2(0, 0))[i], imageLoad(Velocity, ij + ivec2(1, 0))[i], f.x),
      mix(imageLoad(Velocity, ij + ivec2(0, 1))[i], imageLoad(Velocity, ij + ivec2(1, 1))[i], f.x),
      f.y);
}

vec2 get_velocity(vec2 xy)
{
  vec2 vel;
  if (interpolationMode == 0)
  {
    vel.x = linear_interpolate_value(xy - vec2(0.0, 0.5), 0);
    vel.y = linear_interpolate_value(xy - vec2(0.5, 0.0), 1);
  }
  else
  {
    vel.x = bicubic_interpolate_value(xy - vec2(0.0, 0.5), 0);
    vel.y = bicubic_interpolate_value(xy - vec2(0.5, 0.0), 1);
  }

  return vel;
}

const float a = 2.0 / 9.0;
const float b = 3.0 / 9.0;
const float c = 4.0 / 9.0;

vec2 trace_rk3(vec2 pos, float delta)
{
  vec2 k1 = get_velocity(pos);
  vec2 k2 = get_velocity(pos - 0.5 * consts.width * delta * k1);
  vec2 k3 = get_velocity(pos - 0.75 * consts.width * delta * k2);
  return pos - a * consts.width * delta * k1 - b * consts.width * delta * k2 -
         c * consts.width * delta * k3;
}
