#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x_id = 1, local_size_y_id = 2) in;

layout(push_constant) uniform Consts
{
  int width;
  int height;
}
consts;

layout(std430, binding = 0) buffer Div
{
  float value[];
}
div;

layout(std430, binding = 1) buffer Diagonal
{
  float value[];
}
diagonal;

layout(binding = 2, r32f) uniform image2D FluidLevelSet;
layout(binding = 3, r32f) uniform image2D SolidLevelSet;
layout(binding = 4, rgba32f) uniform image2D Velocity;

#include "CommonProject.comp"

void main()
{
  uvec2 localSize = gl_WorkGroupSize.xy;  // Hack for Mali-GPU

  ivec2 pos = ivec2(gl_GlobalInvocationID);
  if (pos.x > 0 && pos.y > 0 && pos.x < consts.width - 1 && pos.y < consts.height - 1)
  {
    int index = pos.x + pos.y * consts.width;
    float liquid_phi = imageLoad(FluidLevelSet, pos).x;
    if (liquid_phi < 0.0 && diagonal.value[index] != 0.0)  // ensure linear system is well formed
    {
      vec2 uv = imageLoad(Velocity, pos).xy;
      float uxp = imageLoad(Velocity, pos + ivec2(1, 0)).x;
      float vyp = imageLoad(Velocity, pos + ivec2(0, 1)).y;

      vec2 wuv = get_weight(pos);
      float wxp = get_weightxp(pos);
      float wyp = get_weightyp(pos);

      float b = (wuv.x * uv.x - wxp * uxp + wuv.y * uv.y - wyp * vyp) * consts.width;

      div.value[index] = b;
    }
    else
    {
      div.value[index] = 0.0;
    }
  }
}
