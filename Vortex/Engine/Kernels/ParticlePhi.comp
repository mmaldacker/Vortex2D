#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x_id = 1, local_size_y_id = 2) in;
layout(constant_id = 3) const float particle_radius = 1.0 / sqrt(2.0);

layout(push_constant) uniform Consts
{
  int width;
  int height;
}
consts;

#include "CommonParticles.comp"

layout(std430, binding = 0) buffer Count
{
  int value[];
}
count;

layout(std430, binding = 1) buffer Particles
{
  Particle value[];
}
particles;

layout(std430, binding = 2) buffer Index
{
  int value[];
}
scanIndex;

layout(binding = 3, r32f) uniform image2D LevelSet;

const int off = 1;

float k(float s)
{
  if (s < 1.0)
  {
    float t = 1 - s;
    return t * t * t;
  }

  return 0.0;
}

void main()
{
  uvec2 localSize = gl_WorkGroupSize.xy;  // Hack for Mali-GPU

  const float h = 2 * particle_radius;

  ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

  vec2 x = vec2(0.0);
  float r = 0.0;
  float sum_weight = 0.0;

  for (int i = -off; i <= off; i++)
  {
    for (int j = -off; j <= off; j++)
    {
      ivec2 newPos = ivec2(pos) + ivec2(i, j);
      if (newPos.x >= 0 && newPos.x < consts.width && newPos.y >= 0 && newPos.y < consts.height)
      {
        int index = newPos.x + newPos.y * consts.width;
        int total = count.value[index];

        for (int n = 0; n < total; n++)
        {
          Particle p = particles.value[scanIndex.value[index] + n];
          vec2 dist = pos + 0.5 - p.Position;

          float w = k(dot(dist, dist) / (h * h));

          x += w * p.Position;
          r += w * particle_radius;
          sum_weight += w;
        }
      }
    }

    // Blobbys formula:
    // float tau = k(particle_radius * particle_radius / (h * h));
    // float phi = tau - sum_weight;

    float phi = 2.0 * off;
    if (sum_weight != 0.0)
    {
      phi = distance(pos + 0.5, x / sum_weight) - r / sum_weight;
    }

    imageStore(LevelSet, pos, vec4(phi, 0.0, 0.0, 0.0));
  }
}
